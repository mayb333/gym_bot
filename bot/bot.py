import os
import random
import json
import time

from config import TOKEN
from greeting import greeting

from datetime import datetime
from datetime import date

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from states import WeightState, ProductState, SendingDataState
from db import DataBase


bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
db = DataBase()


@dp.message_handler(commands='start')
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
    await message.answer(greeting, reply_markup=keyboard)


@dp.message_handler(Text(equals='–§—É–Ω–∫—Ü–∏–∏'))
async def show_functions(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å').insert('–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏') \
                                                                .row('–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω—Ü–∏—é </b>', reply_markup=keyboard)


@dp.message_handler(Text(equals='–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å'), state=None)
async def enter_write_weight(message: types.Message):
    """
    Requesting for writing weight
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('üö´ –û—Ç–º–µ–Ω–∞')
    await WeightState.weight.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥ (–¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞)', reply_markup=keyboard)


@dp.message_handler(state=WeightState.weight)
async def get_weight_from_user(message: types.Message, state: FSMContext):
    """
    Get response from user (weight)
    """

    # saving message id, for deleting unnecessary messages later
    msg_id = message.message_id
    await state.update_data(msg_id=msg_id)

    message_text = message.text.strip()
    if message_text == 'üö´ –û—Ç–º–µ–Ω–∞':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
        await message.answer('üö´ –ó–∞–ø–∏—Å—å –≤–µ—Å–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)
        await state.finish()

        # delete unnecessary messages
        time.sleep(2)
        await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, 1)))
    else:
        try:
            weight = float(message_text)
            limit_weight = 250
            if weight < limit_weight:
                weight = '%.2f' % weight
                await state.update_data(weight=weight)

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–î–∞').insert('–ù–µ—Ç')
                await message.answer(f'‚ùì –•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ {weight} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?', reply_markup=keyboard)
                await WeightState.next()
            else:
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
                await message.answer('‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                     reply_markup=keyboard)
                await state.finish()

        except Exception:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=keyboard)
            await state.finish()

            # delete unnecessary messages
            time.sleep(2)
            await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, 1)))


@dp.message_handler(state=WeightState._continue)
async def write_weight_to_db(message: types.Message, state: FSMContext):
    """
    Check if the user wants to continue writing his weight into db
    """
    answer2 = message.text
    state_data = await state.get_data()
    msg_id = state_data.get('msg_id')

    if answer2 == '–î–∞':

        weight = state_data.get('weight')
        user_id = message.from_user.id
        date_day = date.today()

        if db.user_not_in_weights_for_certain_date(date_day, user_id):
            db.write_to_weights(date_day, user_id, weight)

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer(f'‚úÖ –í–µ—Å {weight} –¥–ª—è –¥–∞—Ç—ã {date_day} –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!', reply_markup=keyboard)

        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer(f'‚ùó –í–µ—Å –¥–ª—è –¥–∞—Ç—ã {date_day} —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—ÖÔ∏è', reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
        await message.answer('üö´ –ó–∞–ø–∏—Å—å –≤–µ—Å–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)

    # delete unnecessary messages
    time.sleep(2)
    await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, 3)))

    await state.finish()


@dp.message_handler(Text(equals='–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏'), state=None)
async def show_categories(message: types.Message):
    """
    Requesting for writing meal (offering to choose a category)
    """

    with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
        products_data = json.load(file)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('üö´ –û—Ç–º–µ–Ω–∞')
    categories = products_data.keys()
    for i, category in enumerate(categories):
        if i % 2 == 0:
            keyboard.row(category)
        else:
            keyboard.insert(category)

    await ProductState.category.set()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)


@dp.message_handler(state=ProductState.category)
async def get_products_category(message: types.Message, state: FSMContext):
    """
    Saving product_category and offering to choose a product
    """
    category = message.text.strip()
    msg_id = message.message_id
    state_data = await state.get_data()
    repeat = state_data.get('repeat')

    with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
        products_data = json.load(file)
    categories = products_data.keys()
    if category in categories:
        await state.update_data(category=category)
        await state.update_data(msg_id=msg_id)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('‚Ü©Ô∏è –ù–∞–∑–∞–¥').insert('üö´ –û—Ç–º–µ–Ω–∞')
        for i, item in enumerate(products_data[category]):
            product_name = item['–Ω–∞–∑–≤–∞–Ω–∏–µ']
            if i % 2 == 0:
                keyboard.row(product_name)
            else:
                keyboard.insert(product_name)

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', reply_markup=keyboard)
        await ProductState.next()
    else:
        if category == 'üö´ –û—Ç–º–µ–Ω–∞':
            message_to_send = 'üö´ –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
        else:
            message_to_send = '‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
        await message.answer(message_to_send, reply_markup=keyboard)
        if repeat:
            await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
        await state.finish()

        # delete unnecessary messages
        time.sleep(2)
        if not repeat:
            await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, -1)))
        await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-1, 1)))


@dp.message_handler(state=ProductState.product)
async def get_product_name(message: types.Message, state: FSMContext):
    """
    Saving product name and offering to write grams of eaten product
    """
    product_name = message.text

    with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
        products_data = json.load(file)

    state_data = await state.get_data()
    category = state_data.get('category')
    msg_id = state_data.get('msg_id')
    repeat = state_data.get('repeat')

    product_is_in_products_data = False
    for item in products_data[category]:
        if item['–Ω–∞–∑–≤–∞–Ω–∏–µ'] == product_name:
            product_is_in_products_data = True

    if product_is_in_products_data:
        await state.update_data(product_name=product_name)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('‚Ü©Ô∏è –ù–∞–∑–∞–¥').insert('üö´ –û—Ç–º–µ–Ω–∞')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–Ω—ã—Ö –≥—Ä–∞–º–º <u>(–¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞)</u>',
                             reply_markup=keyboard)
        await ProductState.next()

    else:
        if product_name == 'üö´ –û—Ç–º–µ–Ω–∞' or (product_name != 'üö´ –û—Ç–º–µ–Ω–∞' and product_name != '‚Ü©Ô∏è –ù–∞–∑–∞–¥'):
            if product_name == 'üö´ –û—Ç–º–µ–Ω–∞':
                message_to_send = 'üö´ –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
            else:
                message_to_send = '‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer(message_to_send, reply_markup=keyboard)
            if repeat:
                await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
            await state.finish()
        elif product_name == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
                products_data = json.load(file)

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('üö´ –û—Ç–º–µ–Ω–∞')
            categories = products_data.keys()
            for i, category in enumerate(categories):
                if i % 2 == 0:
                    keyboard.row(category)
                else:
                    keyboard.insert(category)

            await ProductState.category.set()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

        # delete unnecessary messages
        try:
            time.sleep(2)
            if not repeat:
                await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, -1)))
            await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-1, 3)))
        except Exception:
            msg_id = message.message_id
            await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-3, 1)))


@dp.message_handler(state=ProductState.product_weight)
async def get_product_weight(message: types.Message, state: FSMContext):
    """
    Saving product weight and asking if a user wants to write this product to database
    """
    message_text = message.text.strip()
    state_data = await state.get_data()
    product_name = state_data.get('product_name')
    category = state_data.get('category')
    msg_id = state_data.get('msg_id')
    repeat = state_data.get('repeat')
    limit_products_weight = 2000

    # if message_text == 'üö´ –û—Ç–º–µ–Ω–∞':
    #     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
    #     await message.answer('üö´ –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)
    #
    #     if repeat:
    #         await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
    #     await state.finish()
    #
    # else:
    try:
        product_weight = float(message_text)
        if product_weight < limit_products_weight:
            product_weight = '%.1f' % product_weight
            await state.update_data(product_weight=product_weight)

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–î–∞').insert('–ù–µ—Ç')
            await message.answer(f'‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å \'{product_name}\' —Å –≤–µ—Å–æ–º {product_weight} –≥—Ä–∞–º–º –≤ –±–∞–∑—É '
                                 f'–¥–∞–Ω–Ω—ã—Ö?', reply_markup=keyboard)
            await ProductState.next()
        # if there is an impossible product weight that couldn't have been eaten
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å—ã –ø—Ä–æ–¥—É–∫—Ç–∞. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                 reply_markup=keyboard)
            if repeat:
                await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
            await state.finish()
    # If there is no float message
    except Exception:
        if message_text == 'üö´ –û—Ç–º–µ–Ω–∞':
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer('üö´ –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)

            if repeat:
                await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
            await state.finish()

        elif message_text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
                products_data = json.load(file)
            categories = products_data.keys()
            if category in categories:
                await state.update_data(category=category)
                await state.update_data(msg_id=msg_id)

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('‚Ü©Ô∏è –ù–∞–∑–∞–¥').insert('üö´ –û—Ç–º–µ–Ω–∞')
                for i, item in enumerate(products_data[category]):
                    product_name = item['–Ω–∞–∑–≤–∞–Ω–∏–µ']
                    if i % 2 == 0:
                        keyboard.row(product_name)
                    else:
                        keyboard.insert(product_name)

                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç', reply_markup=keyboard)
                await ProductState.product.set()
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
            await message.answer('‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å—ã –ø—Ä–æ–¥—É–∫—Ç–∞. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                                 reply_markup=keyboard)
            if repeat:
                await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
            await state.finish()

        # delete unnecessary messages
        time.sleep(2)
        msg_id = message.message_id
        await delete_messages(message, msg_id=msg_id, int_range=list(range(-3, 1)))


@dp.message_handler(state=ProductState._continue)
async def write_product_weight_to_db(message: types.Message, state: FSMContext):
    """
    Writing to db and asking if a user wants to write more product to the meal
    """
    answer = message.text
    state_data = await state.get_data()
    repeat = state_data.get('repeat')

    if answer == '–î–∞':
        # write to db

        product_category = state_data.get('category')
        product_name = state_data.get('product_name')
        product_weight = float(state_data.get('product_weight'))
        user_id = message.from_user.id
        date_day = date.today()
        datetime_day = datetime.now()

        with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
            products_data = json.load(file)

        proteins_per_100_grams, carbs_per_100_grams, fats_per_100_grams = 0, 0, 0
        for item in products_data[product_category]:
            if item['–Ω–∞–∑–≤–∞–Ω–∏–µ'] == product_name:
                proteins_per_100_grams = float(item['–±–µ–ª–∫–∏'])
                carbs_per_100_grams = float(item['–±–µ–ª–∫–∏'])
                fats_per_100_grams = float(item['–±–µ–ª–∫–∏'])

        product_proteins = '%.1f' % (product_weight * proteins_per_100_grams / 100)
        product_carbs = '%.1f' % (product_weight * carbs_per_100_grams / 100)
        product_fats = '%.1f' % (product_weight * fats_per_100_grams / 100)

        meal_id = db.set_meal_id(date_day, user_id)

        if repeat:
            """
            if this is not first state running ('write_more_product_for_meal' func resets states and runs this again)
            then 'repeat' key will be available in state.get_data()
            This means that we need to add product to the same meal_id as the previous product has
            """
            db.write_to_proteins(date=date_day, datetime=datetime_day, user_id=user_id, meal_id=meal_id,
                                 meal_name=product_name, grams=product_weight, proteins=product_proteins,
                                 carbs=product_carbs, fats=product_fats)
        else:
            meal_id += 1
            db.write_to_proteins(date=date_day, datetime=datetime_day, user_id=user_id, meal_id=meal_id,
                                 meal_name=product_name, grams=product_weight, proteins=product_proteins,
                                 carbs=product_carbs, fats=product_fats)

        await message.answer(f'‚úÖ –ü—Ä–æ–¥—É–∫—Ç {product_name} —Å {product_proteins} –≥ –±–µ–ª–∫–∞ –≤–µ—Å–æ–º {product_weight} –≥ '
                             f'<b> —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–¥! </b>')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–î–∞').insert('–ù–µ—Ç')
        await message.answer('‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç –≤ —ç—Ç–æ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏?', reply_markup=keyboard)
        await ProductState.next()

    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
        await message.answer('‚ùå –ó–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)
        if repeat:
            await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
        await state.finish()

    # delete unnecessary messages
    msg_id = state_data.get('msg_id')
    time.sleep(2)
    try:
        if not repeat:
            await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, -1)))
        await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-1, 7)))
    except Exception:
        print('[INFO] Couldn\'t delete messages')


@dp.message_handler(state=ProductState.repeat)
async def write_more_product_for_meal(message: types.Message, state: FSMContext):
    """
    If received yes, state will be set to category and this whole form will appear again
    """
    write_more_product_to_meal = message.text
    msg_id = message.message_id

    if write_more_product_to_meal == '–î–∞':
        with open('bot/proteins_data.json', 'r', encoding='utf-8') as file:
            products_data = json.load(file)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('üö´ –û—Ç–º–µ–Ω–∞')
        categories = products_data.keys()
        for i, category in enumerate(categories):
            if i % 2 == 0:
                keyboard.row(category)
            elif i % 2 == 1:
                keyboard.insert(category)

        await state.update_data(repeat=write_more_product_to_meal)
        await ProductState.category.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
        await message.answer('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.', reply_markup=keyboard)
        await state.finish()
        # delete unnecessary messages
        time.sleep(2)
        await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-1, 1)))


@dp.message_handler(Text(equals='–í—ã–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'), state=None)
async def get_data_from_db(message: types.Message):
    """
    Asking what data table a user wants
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏').insert('–î–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ')\
        .insert('üö´ –û—Ç–º–µ–Ω–∞')
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≥—Ä—É–∑–∏—Ç—å</b>', reply_markup=keyboard)
    await SendingDataState.table.set()


@dp.message_handler(state=SendingDataState.table)
async def send_data_from_db(message: types.Message, state: FSMContext):
    """
    Sending user's (weight or proteins) data
    """
    user_id = message.from_user.id
    date_day = date.today()
    msg_id = message.message_id
    message_text = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–§—É–Ω–∫—Ü–∏–∏')
    table = ''

    try:
        if message_text == 'üö´ –û—Ç–º–µ–Ω–∞':
            output = 'üö´ –û—Ç–º–µ–Ω–∞'
        elif message_text == '–î–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ':
            output = db.import_from_weights_sql_to_csv(user_id=user_id, date=date_day)
            table = 'weights'
        elif message_text == '–î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏':
            output = db.import_from_proteins_sql_to_csv(user_id=user_id, date=date_day)
            table = 'proteins'
        else:
            output = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

        if output == 'File is created':
            with open(f'bot/users_csv_data/{table}_data_{user_id}_{date_day}.csv', 'rb') as file:
                await message.answer('‚úÖ')
                await message.reply_document(file, reply_markup=keyboard)

            # delete user's file, that was created
            os.remove(f'bot/users_csv_data/{table}_data_{user_id}_{date_day}.csv')

        elif output == 'No data found':
            await message.answer('‚ùå –ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ', reply_markup=keyboard)
        elif output == 'Problem occurred':
            await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', reply_markup=keyboard)
        elif output == 'üö´ –û—Ç–º–µ–Ω–∞':
            await message.answer('üö´ –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=keyboard)
        else:
            await message.answer('‚ùå –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=keyboard)

    except Exception as exp:
        print(f'[INFO] {exp}')
        await message.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.', reply_markup=keyboard)

    await state.finish()

    # delete unnecessary messages
    time.sleep(2)
    await delete_messages(message=message, msg_id=msg_id, int_range=list(range(-4, 1)))


async def delete_messages(message, msg_id,  int_range: list):
    """
    Function for deleting unnecessary messages
    """
    for number in int_range:
        await bot.delete_message(chat_id=message.chat.id, message_id=msg_id + number)


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    main()
